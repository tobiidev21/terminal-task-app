mod state;

use chrono::Local;
use chrono::DateTime;
use chrono::NaiveDate;

pub use state::StateLifeCycle;
pub use state::StateManagement;

pub struct Task {
    id: Option<i32>, // optional ID, generated by database
    title: String,
    description: Option<String>, // optional String
    state_management: StateManagement,
    state_lyfecycle: StateLifeCycle, 
    creation_date: DateTime<Local>, 
    due_date: Option<NaiveDate>, 
    // expiration_date: DateTime<Local> TO DO: Make an expiration system 
}

impl Task {

    // to create a default task 
    pub fn new() -> Task {
        Task{
            id: None,
            title: String::from("Empty Task"),
            description: None,
            state_management: StateManagement::Created,
            state_lyfecycle: StateLifeCycle::ToDo,
            creation_date: Local::now(),
            due_date: None,
        }
    }

    pub fn modify_task_by_user(&mut self, titl: String,  descript: String, ) {
        self.title = titl;
        self.description = Some(descript);
    }

}

